version: 2.1
jobs:
  build:
    docker:
      - image: circleci/golang:1.14
        environment:
          - GO111MODULE=on
          - MYSQL_USER=gitwize_user
          - MYSQL_PASSWORD=P@ssword123
      - image: mysql:5.7.22
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD=true
          - MYSQL_USER=gitwize_user
          - MYSQL_DATABASE=gitwize
          - MYSQL_PASSWORD=P@ssword123
        command: |
          --character-set-server="utf8"
          --collation-server="utf8_general_ci"
          --sql_mode=""
    working_directory: /go/src/gitwize-lambda
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run:
          name: Checkout be repo to get init.sql
          command: cd /tmp && git clone git@github.com:wizeline/gitwize-be.git && ls /tmp
      - run:
          name: Load init SQL
          command: |
           sudo bash -c "apt-get update && apt-get install -y default-mysql-client"
           mysql -h 127.0.0.1 -P 3306 --protocol=tcp -u ${MYSQL_USER} -p${MYSQL_PASSWORD} </tmp/gitwize-be/docker/init.sql
           mysql -h 127.0.0.1 -P 3306 --protocol=tcp -u ${MYSQL_USER} -p${MYSQL_PASSWORD} <./db/sql/update_metric_pr_open.sql
      - run: sudo apt install bc
      - run: ./scripts/test_coverage.sh
      - run: make # test make
      - run:
          name: "Run Sonarqube scanner"
          command: |
            export SCAN_VERSION=4.3.0.2102-linux
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SCAN_VERSION}.zip
            unzip sonar-scanner-cli-${SCAN_VERSION}.zip
            ./sonar-scanner-${SCAN_VERSION}/bin/sonar-scanner \
             -Dsonar.projectKey=gitwize-lambda \
             -Dsonar.sources=. \
             -Dsonar.host.url=https://sunfyre.wizeline.com \
             -Dsonar.go.coverage.reportPaths=cover.out \
             -Dsonar.login=${SONARQUBE_TOKEN}
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'
  deploy:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/gitwize-lambda
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run: make
      - aws-cli/setup
      - serverless/setup:
          app-name: gitwize
          org-name: wizeline
      - run:
          command: ./scripts/deploy.sh
          name: deploy
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'
orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.0.0
  node: circleci/node@3.0.0
  serverless: circleci/serverless-framework@1.0.1
workflows:
  cicd-workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v[0-9]+(.[0-9]+)./
