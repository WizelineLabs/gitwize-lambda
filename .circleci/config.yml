version: 2.1
jobs:
  build:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run: go test -count=1 ./...
      - run:
          name: Code coverage
          command: |
            go test -coverprofile=coverage.out ./...
            go tool cover -html=coverage.out -o coverage.html
      - run:
          name: "Run Sonarqube scanner"
          command: |
            export SCAN_VERSION=4.3.0.2102-linux
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SCAN_VERSION}.zip 
            unzip sonar-scanner-cli-${SCAN_VERSION}.zip 
            ./sonar-scanner-${SCAN_VERSION}/bin/sonar-scanner \
             -Dsonar.projectKey=gitwize-lambda \
             -Dsonar.sources=. \
             -Dsonar.host.url=https://sunfyre.wizeline.com \
             -Dsonar.go.coverage.reportPaths=coverage.out \
             -Dsonar.login=${SONARQUBE_TOKEN}      
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'
  deploy:
    docker:
      - image: circleci/golang:1.14
    working_directory: /go/src/github.com/{{ORG_NAME}}/{{REPO_NAME}}
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - run: make
      - aws-cli/setup
      - serverless/setup:
          app-name: gitwize
          org-name: wizeline
      - run:
          command: ./scripts/deploy.sh
          name: deploy
      - slack/status:
          fail_only: false
          webhook: '${SLACK_WEBHOOK}'
orbs:
  slack: circleci/slack@3.4.2
  aws-cli: circleci/aws-cli@1.0.0
  node: circleci/node@3.0.0
  serverless: circleci/serverless-framework@1.0.1
workflows:
  cicd-workflow:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
            tags:
              only: /^v[0-9]+(.[0-9]+)./