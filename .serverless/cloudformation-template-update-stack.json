{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "UpdateUnderscoreoneUnderscorerepoLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gitwize-lambda-dev-update_one_repo"
      }
    },
    "UpdateUnderscoreallUnderscorereposLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gitwize-lambda-dev-update_all_repos"
      }
    },
    "UpdateUnderscoresingleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gitwize-lambda-dev-update_single"
      }
    },
    "LoadUnderscoremetricsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/gitwize-lambda-dev-load_metrics"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "dev",
                  "gitwize-lambda",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gitwize-lambda-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/gitwize-lambda-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "rds:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "gitwize-lambda",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "UpdateUnderscoreoneUnderscorerepoLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gitwize-lambda/dev/1591852688962-2020-06-11T05:18:08.962Z/gitwize-lambda.zip"
        },
        "FunctionName": "gitwize-lambda-dev-update_one_repo",
        "Handler": "bin/update_one_repo",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "go1.x",
        "Timeout": 900,
        "Environment": {
          "Variables": {
            "DB_CONN_STRING": "admin:RJ67qmf8oocXix2ERF3H@(dev-gitwize-db.cboppvu0mv3y.ap-southeast-1.rds.amazonaws.com:3306)/gitwize",
            "USE_DEFAULT_API_TOKEN": "TRUE",
            "DEFAULT_GITHUB_TOKEN": "b64e4410adc7961c838979fd6bbdc65bf79c89a4",
            "CYPHER_PASS_PHASE": ""
          }
        }
      },
      "DependsOn": [
        "UpdateUnderscoreoneUnderscorerepoLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateUnderscoreoneUnderscorerepoLambdaVersionphwCgFVQxK2xALxTsC5H37hPe9zLuFz5Ei7yvNIruc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUnderscoreoneUnderscorerepoLambdaFunction"
        },
        "CodeSha256": "TNyl/cEK/d3WQsg7f/eJgaCm2qkqT+tXrNoqHAntD2U="
      }
    },
    "UpdateUnderscoreallUnderscorereposLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gitwize-lambda/dev/1591852688962-2020-06-11T05:18:08.962Z/gitwize-lambda.zip"
        },
        "FunctionName": "gitwize-lambda-dev-update_all_repos",
        "Handler": "bin/update_all_repos",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "go1.x",
        "Timeout": 900,
        "Environment": {
          "Variables": {
            "DB_CONN_STRING": "admin:RJ67qmf8oocXix2ERF3H@(dev-gitwize-db.cboppvu0mv3y.ap-southeast-1.rds.amazonaws.com:3306)/gitwize",
            "USE_DEFAULT_API_TOKEN": "TRUE",
            "DEFAULT_GITHUB_TOKEN": "b64e4410adc7961c838979fd6bbdc65bf79c89a4",
            "CYPHER_PASS_PHASE": ""
          }
        }
      },
      "DependsOn": [
        "UpdateUnderscoreallUnderscorereposLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateUnderscoreallUnderscorereposLambdaVersionYuq81VKj7FoE3bOoQAJGr7EXxJFWDSs7VWiFM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUnderscoreallUnderscorereposLambdaFunction"
        },
        "CodeSha256": "TNyl/cEK/d3WQsg7f/eJgaCm2qkqT+tXrNoqHAntD2U="
      }
    },
    "UpdateUnderscoresingleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gitwize-lambda/dev/1591852688962-2020-06-11T05:18:08.962Z/gitwize-lambda.zip"
        },
        "FunctionName": "gitwize-lambda-dev-update_single",
        "Handler": "bin/update_single",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "go1.x",
        "Timeout": 900,
        "Environment": {
          "Variables": {
            "DB_CONN_STRING": "admin:RJ67qmf8oocXix2ERF3H@(dev-gitwize-db.cboppvu0mv3y.ap-southeast-1.rds.amazonaws.com:3306)/gitwize",
            "USE_DEFAULT_API_TOKEN": "TRUE",
            "DEFAULT_GITHUB_TOKEN": "b64e4410adc7961c838979fd6bbdc65bf79c89a4",
            "CYPHER_PASS_PHASE": ""
          }
        }
      },
      "DependsOn": [
        "UpdateUnderscoresingleLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "UpdateUnderscoresingleLambdaVersionVGrb3NQyYCuQDyxDuyr5NPAOOkeak9pWbo2jBUuaUE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateUnderscoresingleLambdaFunction"
        },
        "CodeSha256": "TNyl/cEK/d3WQsg7f/eJgaCm2qkqT+tXrNoqHAntD2U="
      }
    },
    "LoadUnderscoremetricsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/gitwize-lambda/dev/1591852688962-2020-06-11T05:18:08.962Z/gitwize-lambda.zip"
        },
        "FunctionName": "gitwize-lambda-dev-load_metrics",
        "Handler": "bin/load_metrics",
        "MemorySize": 1024,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        },
        "Runtime": "go1.x",
        "Timeout": 900,
        "Environment": {
          "Variables": {
            "DB_CONN_STRING": "admin:RJ67qmf8oocXix2ERF3H@(dev-gitwize-db.cboppvu0mv3y.ap-southeast-1.rds.amazonaws.com:3306)/gitwize"
          }
        }
      },
      "DependsOn": [
        "LoadUnderscoremetricsLogGroup",
        "IamRoleLambdaExecution"
      ]
    },
    "LoadUnderscoremetricsLambdaVersionGjwO1gX8uGLBUahFwTTaGiKlHPtSAa1hXSEWeVeDHkM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoadUnderscoremetricsLambdaFunction"
        },
        "CodeSha256": "TNyl/cEK/d3WQsg7f/eJgaCm2qkqT+tXrNoqHAntD2U="
      }
    },
    "UpdateUnderscoreallUnderscorereposEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(0 0/8 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "UpdateUnderscoreallUnderscorereposLambdaFunction",
                "Arn"
              ]
            },
            "Id": "update_all_reposSchedule"
          }
        ]
      }
    },
    "UpdateUnderscoreallUnderscorereposLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUnderscoreallUnderscorereposLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "UpdateUnderscoreallUnderscorereposEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "LoadUnderscoremetricsEventsRuleSchedule1": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "ScheduleExpression": "cron(20 0/8 * * ? *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "LoadUnderscoremetricsLambdaFunction",
                "Arn"
              ]
            },
            "Id": "load_metricsSchedule"
          }
        ]
      }
    },
    "LoadUnderscoremetricsLambdaPermissionEventsRuleSchedule1": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoadUnderscoremetricsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "LoadUnderscoremetricsEventsRuleSchedule1",
            "Arn"
          ]
        }
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-gitwize-lambda",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        }
      }
    },
    "ApiGatewayResourceUpdateallrepos": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "update_all_repos",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUpdatesingle": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "update_single",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceLoadmetric": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "load_metric",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodUpdateallreposGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdateallrepos"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUnderscoreallUnderscorereposLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodUpdatesingleGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUpdatesingle"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateUnderscoresingleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayMethodLoadmetricGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceLoadmetric"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoadUnderscoremetricsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      }
    },
    "ApiGatewayDeployment1591852686321": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodUpdateallreposGet",
        "ApiGatewayMethodUpdatesingleGet",
        "ApiGatewayMethodLoadmetricGet"
      ]
    },
    "UpdateUnderscoreallUnderscorereposLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUnderscoreallUnderscorereposLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UpdateUnderscoresingleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateUnderscoresingleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoadUnderscoremetricsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoadUnderscoremetricsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      }
    },
    "UpdateUnderscoreoneUnderscorerepoLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUnderscoreoneUnderscorerepoLambdaVersionphwCgFVQxK2xALxTsC5H37hPe9zLuFz5Ei7yvNIruc"
      }
    },
    "UpdateUnderscoreallUnderscorereposLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUnderscoreallUnderscorereposLambdaVersionYuq81VKj7FoE3bOoQAJGr7EXxJFWDSs7VWiFM"
      }
    },
    "UpdateUnderscoresingleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateUnderscoresingleLambdaVersionVGrb3NQyYCuQDyxDuyr5NPAOOkeak9pWbo2jBUuaUE"
      }
    },
    "LoadUnderscoremetricsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoadUnderscoremetricsLambdaVersionGjwO1gX8uGLBUahFwTTaGiKlHPtSAa1hXSEWeVeDHkM"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      }
    }
  }
}
